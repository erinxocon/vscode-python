name: '$(Year:yyyy).$(Month).0.$(BuildID)-pr'

trigger:
  branches:
    include: ["master", "release", "pysmoke"]

# PR Validation build.
# Notes: Only trigger a PR build for master and release, and skip build/rebuild
#        on changes in the news and .vscode folders.
# pr:
#   autoCancel: true
#   branches:
#     include: ["master", "release", "pysmoke"]
#   paths:
#     exclude: ["/news/1 Enhancements", "/news/2 Fixes", "/news/3 Code Health", "/.vscode"]

# Not the CI build for merges to master and release.
# trigger: none

# Variables that are available for the entire pipeline.
variables:
  PythonVersion: '3.7'
  NodeVersion: '10.5.0'
  NpmVersion: 'latest'
  MOCHA_FILE: '$(Build.ArtifactStagingDirectory)/test-junit.xml' # All test files will write their JUnit xml output to this file, clobbering the last time it was written.
  MOCHA_REPORTER_JUNIT: true # Use the mocha-multi-reporters and send output to both console (spec) and JUnit (mocha-junit-reporter).

jobs:
- job: Compile
  variables:
    Build: false
  pool:
    vmImage: "macos-10.13"
  steps:
    - template: templates/build_phases.yml

- job: Build
  variables:
    Build: true
  pool:
    vmImage: "macos-10.13"
  steps:
    - template: templates/build_phases.yml

# - job: Test

#   strategy:
#     matrix:
#       # Each member of this list must contain these values:
#         # VMImageName: '[name]' - the VM image to run the tests on.
#         # TestsToRun: 'testA, testB, ..., testN' - the list of tests to execute, see the list above.
#       # Each member of this list may contain these values:
#         # NeedsPythonTestReqs: [true|false] - install the test-requirements prior to running tests. False if not set.
#         # NeedsPythonFunctionalReqs: [true|false] - install the functional-requirements prior to running tests. False if not set.
#         # PythonVersion: 'M.m' - the Python version to run. DefaultPythonVersion if not set.
#         # NodeVersion: 'x.y.z' - Node version to use. DefaultNodeVersion if not set.
#         # SkipXvfb: [true|false] - skip initialization of xvfb prior to running system tests on Linux. False if not set
#         # UploadBinary: [true|false] - upload test binaries to Azure if true. False if not set.
#       'Win-Py3.7 Unit':
#         VMImageName: 'vs2017-win2016'
#         TestsToRun: 'runHygiene, testUnitTests, pythonUnitTests, pythonInternalTools'
#         NeedsPythonTestReqs: true
#       'Win-Py2.7 Unit':
#         PythonVersion: '2.7'
#         VMImageName: 'vs2017-win2016'
#         TestsToRun: 'pythonUnitTests'
#         NeedsPythonTestReqs: true
#       'Mac-Py3.7 Unit':
#         PythonVersion: '3.7'
#         VMImageName: 'macos-10.13'
#         TestsToRun: 'testUnitTests, pythonUnitTests, pythonInternalTools'
#         NeedsPythonTestReqs: true
#       'Mac-Py3.7 Single Workspace':
#         PythonVersion: '3.7'
#         VMImageName: 'macos-10.13'
#         TestsToRun: 'testSingleWorkspace'
#         NeedsPythonTestReqs: true
#       'Mac-Py2.7 Unit+Single':
#         PythonVersion: '2.7'
#         VMImageName: 'macos-10.13'
#         TestsToRun: 'testUnitTests, pythonUnitTests, testSingleWorkspace'
#         NeedsPythonTestReqs: true
#       'Linux-Py3.7 Unit':
#         PythonVersion: '3.7'
#         VMImageName: 'ubuntu-16.04'
#         TestsToRun: 'testUnitTests, pythonUnitTests, pythonInternalTools'
#         NeedsPythonTestReqs: true
#       'Linux-Py3.7 Single Workspace':
#         PythonVersion: '3.7'
#         VMImageName: 'ubuntu-16.04'
#         TestsToRun: 'testSingleWorkspace'
#         NeedsPythonTestReqs: true
#       'Linux-Py2.7 Unit+Single':
#         PythonVersion: '2.7'
#         VMImageName: 'ubuntu-16.04'
#         TestsToRun: 'testUnitTests, pythonUnitTests, testSingleWorkspace'
#         NeedsPythonTestReqs: true
#       'Linux-Py3.7 Functional':
#         PythonVersion: '3.7'
#         VMImageName: 'ubuntu-16.04'
#         TestsToRun: 'testfunctional'
#         NeedsPythonTestReqs: true
#         NeedsPythonFunctionalReqs: true

#   pool:
#     vmImage: $(VMImageName)

#   steps:
#     - template: templates/test_phases.yml

- job: Smoke
  dependsOn:
    - Build
  strategy:
    matrix:
      # Smoke tests on min and latest versions of Python.
      "Mac-Py3.7":
          PythonVersion: "3.7"
          VMImageName: "macos-10.13"
          Tags: "--tags=smoke"

      "Mac-Py2.7":
          PythonVersion: "2.7"
          VMImageName: "macos-10.13"
          Tags: "--tags=smoke"
    #   # Terminal.
    #   "Mac-Py3.7 Terminal":
    #       PythonVersion: "3.7"
    #       VMImageName: "macos-10.13"
    #       Tags: "--tags=terminal --tags=~pipenv --tags=~venv"

    #   "Mac-Py3.6 Terminal":
    #       PythonVersion: "3.6"
    #       VMImageName: "macos-10.13"
    #       Tags: "--tags=terminal --tags=~pipenv --tags=~venv"

    #   "Mac-Py3.5 Terminal":
    #       PythonVersion: "3.5"
    #       VMImageName: "macos-10.13"
    #       Tags: "--tags=terminal --tags=~pipenv --tags=~venv"

    #   "Mac-Py2.7 Terminal":
    #       PythonVersion: "2.7"
    #       VMImageName: "macos-10.13"
    #       Tags: "--tags=terminal --tags=~pipenv --tags=~venv"
    #   # Testing
    #   "Mac-Py3.7 Testing":
    #       PythonVersion: "3.7"
    #       VMImageName: "macos-10.13"
    #       Tags: "--tags=test"

    #   "Mac-Py3.6 Testing":
    #       PythonVersion: "3.6"
    #       VMImageName: "macos-10.13"
    #       Tags: "--tags=test"

    #   "Mac-Py3.5 Testing":
    #       PythonVersion: "3.5"
    #       VMImageName: "macos-10.13"
    #       Tags: "--tags=test"

    #   "Mac-Py2.7 Testing":
    #       PythonVersion: "2.7"
    #       VMImageName: "macos-10.13"
    #       Tags: "--tags=test"

  pool:
    vmImage: $(VMImageName)

  steps:
    - template: templates/uitest_phases.yml

- job: Upload
  dependsOn:
    - Compile
    - Build
    - Smoke
  pool:
    vmImage: "macos-10.13"
  steps:
    - template: templates/upload.yml
